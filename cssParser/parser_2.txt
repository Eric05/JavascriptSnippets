<!DOCTYPE html>
<html>

<head>
<style> 
body {
padding: 20px;
background-image: linear-gradient(black,darkgrey,black);
}
h2 {
color:white;
text-align:center;
font-family: 'impact';
font-size:35px;
letter-spacing:3px;
}
div {
white-space: pre-wrap;
float:right;
margin-top:15px;
margin-left: 3%;
box-shadow: inset 1px 1px 2px black;
  background-color: lightgrey;
  width: 40%;
  height:300px;
  padding:2%;

}
button {
width:20%;
padding: 10px;
color:darkgrey;
margin-bottom:30px;
}
input {
width:40%;
margin-left: 3%;
border:1px solid silver;
padding: 9px;
box-shadow: inset 1px 1px 2px black;
margin-right:50px;
color:silver;
}

textarea {

padding:5px;
margin-top:15px;
margin-left: 3%;
box-shadow: inset 1px 1px 2px black;
  background-color: rgba(250,250,250,0.7);
  width: 40%;
  height:300px;
  padding:2%;
}
</style>
</head>
<body>
<h2> Css Parser </h2>
<input type="file" id="upload" multiple>
<button id = "convert" onclick="printOutput()"> Convert </button>
<button id="create">Download</button> <a download="info.txt" id="downloadlink" style="display: none">Download</a>

<br>
<textarea id="inputTextbox" style="width:40%; min-height:300px" >Copy text or upload file </textarea>
<textarea id="outputTextbox" style="width:40%; min-height:300px">...</textarea>
<br><br>
<hr>
<script>
//---------download
(function () {
var textFile = null,
  makeTextFile = function (text) {
    var data = new Blob([text], {type: 'text/plain'});

    // If we are replacing a previously generated file we need to
    // manually revoke the object URL to avoid memory leaks.
    if (textFile !== null) {
      window.URL.revokeObjectURL(textFile);
    }

    textFile = window.URL.createObjectURL(data);

    return textFile;
  };


  var create = document.getElementById('create'),
    textbox = document.getElementById('outputTextbox');

  create.addEventListener('click', function () {
    var link = document.createElement('a');
    link.setAttribute('download', 'info.txt');
    link.href = makeTextFile(textbox.value);
    document.body.appendChild(link);

    // wait for the link to be added to the document
    window.requestAnimationFrame(function () {
      var event = new MouseEvent('click');
      link.dispatchEvent(event);
      document.body.removeChild(link);
		});
    
  }, false);
})();

//-------------------------------------
document.getElementById('upload').addEventListener('change', readFileAsString);

function readFileAsString() {
    var files = this.files;
    var erg = "";
    
    if (files.length === 0) {
        console.log('No file is selected');
        return;
    }

    var reader = new FileReader();
    reader.onload = function(event) {
    erg = event.target.result;
      document.getElementById('inputTextbox').innerHTML = erg;
    };
   reader.readAsText(files[0]);
  return erg;
}

var inp = readFileAsString();

//---------------------------
function splitPropertyAndValue(str){
var arr = [];

var pos = str.indexOf(':') + 1;
var property = str.slice(0, pos);
var val = (str.slice(pos,str.length));

arr.push(property);
arr.push(val);

return arr;
}

function changeDashToCaptial(str) {
var erg;

if ( str.includes('-')) {
var pos = str.indexOf('-') + 1;
var str1 = str.slice(0, pos);
var str2 = (str.slice(pos,str.length));
var capStr2 = capitalizeFirstLetter(str2);

erg = (str1 + capStr2).replace('-','');
} else {
 erg = str;
}
return erg;
}

function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function surroundWithSingleQuote(str){
var erg = "";

str = (str.replace(/\"/g,"'")).trim();

if(str.charAt(0) == "'") {
erg = " " + str;
} else if(isNaN(str)) {
erg = " '"+ str.trim() + "'";
} else {
erg = " " + str;
}
return erg;
}

function cssToReactNative(str) {

var keyVal = splitPropertyAndValue(str);
var str1 = changeDashToCaptial(keyVal[0]);
var str2 = surroundWithSingleQuote(keyVal[1]);

return str1 + str2;
}

function changeElem(str,name){
var arr = (str.trim()).split(';');

var elem = arr.map(cssToReactNative);
var erg = elem.join(",");
var cleanErg = erg.substring(0,erg.length-2);
var output = name.trim() + ": {" + cleanErg + "}"

return output;
}

function splitSelectorAndDeclaration(str){
var rex = /[{}]/;
var arr = str.split(rex);

var assoc = [];

for( i = 0; i < arr.length-1; i += 2) {
var obj = {key: arr[i], val: arr[i+1]};
assoc.push(obj);
}
return assoc;
}

function createOutput(arr){
var inp = splitSelectorAndDeclaration(text);
var output = "";

for( i = 0; i < inp.length; i++) {

output += changeElem(inp[i].val,inp[i].key)  + ',';
}
var erg = output.slice(0,-1);
return erg;
}


function printOutput(){
text = document.getElementById("inputTextbox").value;
document.getElementById("outputTextbox").innerHTML= createOutput(text);
}
</script>

</body>
</html>



